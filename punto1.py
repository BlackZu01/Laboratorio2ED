# -*- coding: utf-8 -*-
"""Punto1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rkd4lrz_9tLJb1h7sH4OtYlN8DwBfMxA
"""

class Node:    
    def __init__(self,data):    
      self.data = data;        
      self.next = None;

class LinkedList:    
    #Definimos el inicio y el final de la lista   
    def __init__(self):    
      self.PTR = None;    
      self.ULT = None;   
    
    def Addnode_right(self, data):
      #Creo mi nuevo nodo
      newNode = Node(data)
      #Si la lista esta vacia
      if (self.PTR == None):
        #Asigno como PTR y ULT mi nuevo nodo
        #Y hago que mi nodo apunte a nulo 
        self.PTR = self.ULT = newNode
        self.ULT.next = None
      #Si la lista no esta vacia
      else:
        #El ultimo apunte a mi nuevo nodo
        self.ULT.next = newNode
        #Asigno mi nuevo ULT
        self.ULT = newNode
        #hago que mi nodo apunte a nulo 
        self.ULT.next = None  

    def Addnode_left(self, data):
      #Creo mi nuevo nodo
      newNode = Node(data)
      #Si la lista esta vacia
      if (self.PTR == None):
        #Asigno como PTR y ULT mi nuevo nodo
        #Y hago que mi nodo apunte a nulo 
        self.PTR = self.ULT = newNode
        self.ULT.next = None
      #Si la lista no esta vacia
      else:
        #Mi nodo apunte al primero
        newNode.next = self.PTR
        #Asigno mi nuevo PTR
        self.PTR = newNode
    
    def Size(self):
      #Creo mi contador y posiciono P en el inicio
      n = 0
      P = self.PTR
      #Recorro todo P y aumento el contador en uno cada iteracion
      while( P != None):
        n = n + 1
        P = P.next
      #Retorno el tama単o de mi lista 
      return n

    def Display(self):
        #Estaciono P en el inicio del nodo    
        P = self.PTR;    
        if(self.PTR == None):  
            #Si la lista esta vacia entonces mandamos este mensaje  
            print("List is empty");    
            return;    
        while(P != self.ULT):
            #Vamos imprimendo nuestros nodos         
            print(P.data, end = " --> "),;    
            P = P.next; 
        #Imprimimos el ultimo a parte por estetica   
        print(self.ULT.data, end=" --> None ")

    def Num_to_List(self, number, signo):
      if(number != 0):
        #Convertimos un numero en una lista
        while(number != 0):
          #Creamos un nodo con cada digito del numero
          #y lo a単adimos a la izquierda de la lista 
          #Asi el numero queda en orden
          self.Addnode_left(number % 10)
          number = int(number/10)
        #Si nuestro numero es negativo entonces 
        #agregamos el menos en nuestro inicio  
        if (signo < 0):
          self.PTR.data = self.PTR.data * -1
      else:
        self.Addnode_right(number)
    
    def List_to_Num(self):
      #Estaciono P en el inicio del nodo   
      P = self.PTR
      signo = 0
      #Miramos si nuestro incio (donde guardamos el signo)
      #es negativo o positivo
      if(self.PTR.data > 0):
        signo = 1
      elif(self.PTR.data < 0):
        #Aqui volvemos postivo el inicio pues al sacar 
        #los digitos si nos queda el numero negativo
        #se podria da単ar la obtencion del numero
        signo = -1
        self.PTR.data = self.PTR.data * -1
      #Inicializamos nuestro nuevo numero
      number = 0
      #Tomamos el tama単o asi pues contamos el 0
      i = self.Size() - 1 
      while(P != None):
        #Asemos la suma de las respectivas unidades
        #decenas, etc...
        number = number + P.data*(10**i)
        i = i - 1
        P = P.next
      #Le damos el valor negativo o postivo que tenga el numero 
      number = number * signo
      return number
    
def valid(number):
  #Guardamos el numero en otra variable para no perderlo
  aux = number
  #Inicializamos nuestro contador
  cont = 0
  while (aux != 0):
    #Vamos quitando digito por digito del numero
    #Y guardando la cantidad de digitos
    aux = int(aux/ 10)
    cont = cont + 1
  return cont

Nums = []
Sings = []

print("========== Welcome to list adder and multiplier ==========")
print("how many numbers do you want to add or multiplier?")
k = int(input())

while(k < 1 or k > 100 ):
  print("============ that amount is absurd ============")
  print("how many numbers do you want to add or multiplier?")
  k = int(input())
for j in range(0,k):
  print("Please enter the number of your list ", j+1)
  Nums.append(int(input()))
  while( valid(Nums[j]) > 100 ):
    print("===========> The number can only have at most 100 digits <===========")
    print("Please enter the number of your list ", j+1)
    Nums[j] = int(input())
  if (Nums[j] > 0):
    Sings.append(1)
  elif (Nums[j] < 0):
    Sings.append(-1)
    Nums[j] = Nums[j] * -1
  else:
    Sings.append(0)

print("What do you want to do? [1 = sum] or [2 = mult]")
decision = int(input())
while(decision < 1 or decision > 2):
  print("===========> This opcion doesn't exist <===========")
  print("What do you want to do? [1 = sum] or [2 = mult]")
  decision = int(input())

print(Sings)

if(decision == 1):
  num = 0  
  print('\t[+] Addition [+]')
  for j in range(0,k-1):
    lists = LinkedList()
    lists.Num_to_List(Nums[j], Sings[j])
    num = num + Nums[j]*Sings[j]
    lists.Display()
    print(" ")
    print("+ ")
    del lists
  lists = LinkedList();
  lists.Num_to_List(Nums[k-1], Sings[k-1])
  num = num + Nums[k-1]*Sings[k-1]
  lists.Display()
  print(" ")
  print("= ")
  if (num > 0):
    sing = 1
  elif (num < 0):
    sing = -1
    num = num * -1
  del lists
  lists = LinkedList();
  lists.Num_to_List(num, sing)
  lists.Display()
  print(" ")
  print("The result given in the list is: ", num)
else:
  num = 1 
  print('\t[x] Multiplication [x]')
  for j in range(0,k-1):
    lists = LinkedList();
    lists.Num_to_List(Nums[j], Sings[j])
    num = num * Nums[j]*Sings[j]
    lists.Display()
    print(" ")
    print("x ")
    del lists
  lists = LinkedList();
  lists.Num_to_List(Nums[k-1], Sings[k-1])
  num = num * Nums[k-1]*Sings[k-1]
  lists.Display()
  print(" ")
  print("= ")
  sing = 0
  if (num > 0):
    sing = 1
  elif (num < 0):
    sing = -1
    num = num * -1
  del lists
  lists = LinkedList();
  lists.Num_to_List(num, sing)
  lists.Display()
  print(" ")
  print("The result given in the list is: ", num)